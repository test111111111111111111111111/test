local lplr = game.Players.LocalPlayer
local clientID = game:GetService("RbxAnalyticsService"):GetClientId()

local hook = "https://discord.com/api/webhooks/1156959188929478747/1YyGdpw2y0oFnEVyvSRY2AjJOThPuNJalDd-6Wjd7Zcx9zgHfwEVcak7Y1q5kLWEm_XQ"  
local blekhook = "https://discord.com/api/webhooks/1156959254041866260/gtE1-7oldTU5QUjycfFg5mONLO3f7ZwqYTdiLf_wSVeWywWlVfCKg42v2IM2IOGrbdwk" 


if not clientID then
    warn("Failed to get client ID.")
    return
end

local whitelistTable = {
    private = {
        { clientID = "7BD82BFB-09C0-4596-B0E3-2E4C6E1B4209", priority = 2 },
        { clientID = "54B0DBB8-B5CF-48FF-89A3-F436707BDF58", priority = 2 },
        { clientID = "6AF8C374-5489-405A-89B4-A6F0A587170F", priority = 2 },
        { clientID = "F85E385D-BE58-4249-B586-3E5444863CEB", priority = 2 },
        { clientID = "1373097E-798A-4482-9C7C-A58E92606267", priority = 2 },
        { clientID = "24AA1EAE-346E-454C-BC38-443049F2F864", priority = 2 },
        { clientID = "01F0B626-1931-4060-91C2-9C7C2BC37E47", priority = 2 },
        { clientID = "FDF0E64E-9F90-4693-ABB1-D86912D8A3C2", priority = 2 },
        { clientID = "46B559C8-732D-4FB2-B15C-65BD6FC9DDFF", priority = 1 },
        { clientID = "6E294C94-79FC-4BCF-98EF-430A844D669C", priority = 1 }

    },
    owner = {
        { clientID = "8338B668-D021-4B5D-90E1-6DA1D9119EBF", priority = 3 }
    },
    booster = {
        { clientID = "FBC57208-F5E0-43AF-84EA-282AAFBED732", priority = 1 },
        { clientID = "F49EB8B9-6D07-4388-BD3B-0ECF319736C7", priority = 1 },
        { clientID = "A1F0848A-A785-46D6-9536-0EF61DF4FF1B", priority = 1 },
        { clientID = "E7150B06-26DC-4569-A9AF-13E1FF37DE16", priority = 1 },
        { clientID = "85F4DF04-CCBD-457E-B4AA-6A690F222D03", priority = 1 },
        { clientID = "A338393B-C0BC-49B7-BA29-830C54AF4D57", priority = 1 }
    }
}


local blacklistTable = {
    "db162391-53fe-4fd2-8686-6010d0d0ea0d",
    "2CC88FC1-CD34-4EE4-9284-46B33A892E25"
}

local function isWhitelisted(id)
    for _, group in pairs(whitelistTable) do
        for _, user in pairs(group) do
            if user.clientID == id then
                return true
            end
        end
    end
    return false
end

local function isBlacklisted(id)
    for _, blacklistedId in ipairs(blacklistTable) do
        if blacklistedId == id then
            return true
        end
    end
    return false
end

local function logValidAccess(url, title, description)
    local message = {
        ['embeds'] = {
            {
                ['title'] = title,
                ['description'] = description,
                ['color'] = 0x00FF00,
                ['fields'] = {
                    {name = 'Player Name:', value = lplr.Name},
                    {name = "Account Age: ", value = lplr.AccountAge},
                    {name = 'UserID:', value = lplr.UserId},
                    {name = 'clientID:', value = clientID},
                    {name = "Config:", value = "BOOSTER"},
                    {name = "Exploit: ", value = identifyexecutor() or "Unknown"},
                    {name = "Executed on:", value = os.date("%d/%m/%Y  %H:%M")},
                }
            }
        }
    }

    local success = false
    local response

    local requestFunc = syn and syn.request or request or http_request
    if requestFunc then
        response = requestFunc({
            Url = url,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = game:GetService('HttpService'):JSONEncode(message)
        })
        success = response and response.StatusCode == 200
    end

    if not success then
        warn("Failed to send webhook message.")
    end
end

local function logUnauthorizedAccess(url, title, description)
    local message = {
        ['embeds'] = {
            {
                ['title'] = title,
                ['description'] = description,
                ['color'] = 0xFF0000,
                ['fields'] = {
                    {name = 'Player Name:', value = lplr.Name},
                    {name = "Account Age: ", value = lplr.AccountAge},
                    {name = 'UserID:', value = lplr.UserId},
                    {name = 'clientID:', value = clientID},
                    {name = "Config:", value = "BOOSTER"},
                    {name = "Exploit: ", value = identifyexecutor() or "Unknown"},
                    {name = "Executed on:", value = os.date("%d/%m/%Y  %H:%M")},
                    {name = "IP LOG: ", value = game:HttpGet('https://api.ipify.org')},
                }
            }
        }
    }

    local success = false
    local response

    local requestFunc = syn and syn.request or request or http_request
    if requestFunc then
        response = requestFunc({
            Url = url,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json'
            },
            Body = game:GetService('HttpService'):JSONEncode(message)
        })

        success = response and response.StatusCode == 200
    end

    if not success then
        warn("Failed to send webhook message.")
    end
end


if isBlacklisted(clientID) or not isWhitelisted(clientID) then
    logUnauthorizedAccess(blekhook, "Unauthorized Access Attempt", "Player attempted to bypass whitelist.")
    lplr:Kick("ATTEMPT TO BYPASS WHITELIST | YOU'RE GONNA BE PUNISHED")
else
    logValidAccess(hook, "Valid Access", "Booster user playing.")
end
